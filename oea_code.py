# -*- coding: utf-8 -*-
"""OEA_CODE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WBqA2pTEGvwIJ809pumbgnY2yyPQEfP2

Project title : breast cancer classification

## Loading the Data
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the data from sklearn
breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

#loading the data to data frame
df = pd.DataFrame(breast_cancer_dataset.data,columns = breast_cancer_dataset.feature_names)

#print the first 5 rows of dataframe
df.head()

# adding the 'traget' column to the data frame
df['label'] = breast_cancer_dataset.target

#print last 5 rows of the data frame
df.tail()

# number of row and columns in the dataset
df.shape

#getting some information about the data
df.info()

# checking for missing values
df.isnull().sum()

# statistical measures about the data
df.describe()

# cheaking the distribution of target variable
df['label'].value_counts()

"""# Data Visualization"""

plt.scatter(df['mean radius'],df['label'],color='red')
plt.title("Scatter plot")
plt.xlabel("mean radius")
plt.ylabel("Label")
plt.show()

sns.countplot(x='label',data=df)

import plotly.express as px
fig = px.pie(df,names="label",hole=0.2)
fig.show()

"""1 -> Benign
0 -> Malignant

## Feature Selection
"""

df.groupby('label').mean()

X = df.drop(columns = 'label',axis =1)
Y = df['label']

print(X)

print(Y)

# Commented out IPython magic to ensure Python compatibility.
from sklearn.feature_selection import mutual_info_classif
# %matplotlib inline
importances = mutual_info_classif(X,Y)
feat_importances = pd.Series(importances,df.columns[0:len(df.columns)-1])
feat_importances.plot(kind='barh',color='teal')
plt.show()

df=df.drop(columns='texture error',axis=1)

df=df.drop(columns='mean fractal dimension',axis=1)

df=df.drop(columns='smoothness error',axis=1)

df.info()

"""Spitting the data into training data and testing data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,random_state = 2)

plt.figure(figsize=(18,18))
sns.heatmap(X.corr(),annot=True,cmap="RdYlGn")
plt.show()

"""# Model Selection

# Logistic Regression
"""

model = LogisticRegression()

# logictic regression using training data
model.fit(X_train, Y_train)

model.score(X_train,Y_train)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on test data =',test_data_accuracy)

"""# By Decision Treee"""

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(X_train, Y_train)
dt.score(X_test, Y_test)

y_pred = dt.predict(X_test)
pred = accuracy_score(Y_test, y_pred)
print('Accuracy : ',accuracy_score(Y_test,y_pred))

"""# Random Forest"""

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(X_train,Y_train)

rf.score(X_train,Y_train)

Y_pred = rf.predict(X_test)
prediction = accuracy_score(Y_test, Y_pred)
print("Accuracy :",prediction)

"""# model Evaluation"""

from sklearn.metrics import confusion_matrix
confusion_matrix(Y_test, Y_pred)

from sklearn.metrics import classification_report
print(classification_report(Y_test, Y_pred))

"""Bulding a Predictive System"""

input_data = (18.22,18.7,120.3,1033,0.1148,0.1485,0.1772,0.106,0.2092,0.0631,0.8337,1.593,4.877,98.81,0.003899,0.02961,0.02817,0.009222,0.02674,0.005126,20.6,24.13,135.1,1321,0.128,0.2297,0.2623,0.1325,0.3021,0.07987)
# changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array we are predicting for one data point
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == 0 ):
 print('The Breast cancer is Malignant')

else :
  print('The Breast cancer is Benign')